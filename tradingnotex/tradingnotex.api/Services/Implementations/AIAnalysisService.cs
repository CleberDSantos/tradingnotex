using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using TradingNoteX.Services.Interfaces;

namespace TradingNoteX.Services.Implementations
{
    public class AIAnalysisService : IAIAnalysisService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<AIAnalysisService> _logger;
        private readonly string _aiProvider;
        private readonly string _apiKey;

        // Personalidade do assistente SMC/OTE
        private const string SMC_OTE_SYSTEM_PROMPT = @"
        Voc√™ √© um especialista em Smart Money Concepts (SMC) e Optimal Trade Entry (OTE) com mais de 10 anos de experi√™ncia em trading institucional.
        
        Seu conhecimento inclui:
        - Estrutura de mercado e mudan√ßas de car√°ter (CHoCH/BOS)
        - Order Blocks (Bullish OB, Bearish OB, Breaker Blocks)
        - Fair Value Gaps (FVG) e Imbalances
        - OTE Zone (61.8% - 78.6% Fibonacci retracement)
        - Liquidity Pools e Stop Hunts
        - Premium/Discount Zones
        - Market Structure Shift (MSS)
        - Inducement e Judas Swing
        - Asian Session Range e Kill Zones
        
        Ao analisar trades e coment√°rios:
        1. Sempre relacione com conceitos SMC
        2. Identifique poss√≠veis melhorias na entrada usando OTE
        3. Aponte estruturas de mercado relevantes
        4. Sugira gest√£o de risco baseada em Order Blocks
        5. Use terminologia t√©cnica mas explique de forma clara
        6. Seja espec√≠fico sobre n√≠veis e zonas
        7. Mencione conflu√™ncias quando relevante
        
        Mantenha um tom profissional mas acess√≠vel, como um mentor experiente.";

        public AIAnalysisService(
            HttpClient httpClient,
            IConfiguration configuration,
            ILogger<AIAnalysisService> logger)
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _logger = logger;

            // Configurar provider de IA (OpenAI, Gemini, Claude, etc)
            _aiProvider = _configuration["AI:Provider"] ?? "openai";
            _apiKey = _configuration[$"AI:{_aiProvider}:ApiKey"];
        }

        public async Task<string> AnalyzeTradeCommentAsync(
            string commentText,
            string tradeSide,
            decimal tradePL,
            string instrument = null,
            decimal entryType = 50,
            bool greed = false)
        {
            try
            {
                var prompt = BuildAnalysisPrompt(commentText, tradeSide, tradePL, instrument, entryType, greed);

                string analysis = _aiProvider.ToLower() switch
                {
                    "openai" => await CallOpenAIAsync(prompt),
                    "gemini" => await CallGeminiAsync(prompt),
                    "claude" => await CallClaudeAsync(prompt),
                    "local" => GenerateLocalAnalysis(commentText, tradeSide, tradePL, instrument, entryType, greed),
                    _ => GenerateLocalAnalysis(commentText, tradeSide, tradePL, instrument, entryType, greed)
                };

                return analysis;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao analisar coment√°rio com IA");
                return GenerateLocalAnalysis(commentText, tradeSide, tradePL, instrument, entryType, greed);
            }
        }

        private string BuildAnalysisPrompt(
            string commentText,
            string tradeSide,
            decimal tradePL,
            string instrument,
            decimal entryType,
            bool greed)
        {
            return $@"
            Analise o seguinte coment√°rio de trade no contexto SMC/OTE:
            
            Instrumento: {instrument ?? "TECH100"}
            Dire√ß√£o: {tradeSide}
            P/L: ‚Ç¨{tradePL}
            Tipo de Entrada: {(entryType < 30 ? "Impulsiva" : entryType > 70 ? "Operacional" : "Balanceada")}
            Gan√¢ncia detectada: {(greed ? "Sim" : "N√£o")}
            
            Coment√°rio do trader: ""{commentText}""
            
            Por favor, forne√ßa:
            1. An√°lise t√©cnica baseada em SMC
            2. Avalia√ß√£o da entrada em rela√ß√£o √† OTE Zone
            3. Identifica√ß√£o de poss√≠veis estruturas perdidas
            4. Sugest√µes espec√≠ficas de melhoria
            5. Gest√£o de risco recomendada
            
            Responda de forma concisa mas completa, como um mentor SMC.";
        }

        private async Task<string> CallOpenAIAsync(string prompt)
        {
            if (string.IsNullOrEmpty(_apiKey))
            {
                _logger.LogWarning("API Key OpenAI n√£o configurada");
                return GenerateLocalAnalysis("", "", 0, "", 50, false);
            }

            var request = new
            {
                model = _configuration["AI:openai:Model"] ?? "gpt-4-turbo-preview",
                messages = new[]
                {
                    new { role = "system", content = SMC_OTE_SYSTEM_PROMPT },
                    new { role = "user", content = prompt }
                },
                temperature = 0.7,
                max_tokens = 500
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");

            var response = await _httpClient.PostAsync(
                "https://api.openai.com/v1/chat/completions",
                content
            );

            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(responseJson);
                return result.choices[0].message.content;
            }

            _logger.LogError($"OpenAI API error: {response.StatusCode}");
            return GenerateLocalAnalysis("", "", 0, "", 50, false);
        }

        private async Task<string> CallGeminiAsync(string prompt)
        {
            if (string.IsNullOrEmpty(_apiKey))
            {
                _logger.LogWarning("API Key Gemini n√£o configurada");
                return GenerateLocalAnalysis("", "", 0, "", 50, false);
            }

            var request = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = SMC_OTE_SYSTEM_PROMPT + "\n\n" + prompt }
                        }
                    }
                },
                generationConfig = new
                {
                    temperature = 0.7,
                    maxOutputTokens = 500
                }
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var model = _configuration["AI:gemini:Model"] ?? "gemini-pro";
            var url = $"https://generativelanguage.googleapis.com/v1/models/{model}:generateContent?key={_apiKey}";

            var response = await _httpClient.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(responseJson);
                return result.candidates[0].content.parts[0].text;
            }

            _logger.LogError($"Gemini API error: {response.StatusCode}");
            return GenerateLocalAnalysis("", "", 0, "", 50, false);
        }

        private async Task<string> CallClaudeAsync(string prompt)
        {
            if (string.IsNullOrEmpty(_apiKey))
            {
                _logger.LogWarning("API Key Claude n√£o configurada");
                return GenerateLocalAnalysis("", "", 0, "", 50, false);
            }

            var request = new
            {
                model = _configuration["AI:claude:Model"] ?? "claude-3-opus-20240229",
                messages = new[]
                {
                    new { role = "user", content = prompt }
                },
                system = SMC_OTE_SYSTEM_PROMPT,
                max_tokens = 500,
                temperature = 0.7
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Add("x-api-key", _apiKey);
            _httpClient.DefaultRequestHeaders.Add("anthropic-version", "2023-06-01");

            var response = await _httpClient.PostAsync(
                "https://api.anthropic.com/v1/messages",
                content
            );

            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(responseJson);
                return result.content[0].text;
            }

            _logger.LogError($"Claude API error: {response.StatusCode}");
            return GenerateLocalAnalysis("", "", 0, "", 50, false);
        }

        private string GenerateLocalAnalysis(
            string commentText,
            string tradeSide,
            decimal tradePL,
            string instrument,
            decimal entryType,
            bool greed)
        {
            var analysis = new StringBuilder();

            analysis.AppendLine("üìä **An√°lise SMC/OTE do Trade:**\n");

            // An√°lise do resultado
            if (tradePL >= 0)
            {
                analysis.AppendLine($"‚úÖ **Trade vencedor** com P/L de ‚Ç¨{tradePL:F2}");
                analysis.AppendLine("‚Ä¢ Poss√≠vel entrada em Order Block v√°lido");
                analysis.AppendLine("‚Ä¢ Estrutura de mercado provavelmente respeitada\n");
            }
            else
            {
                analysis.AppendLine($"‚ùå **Trade perdedor** com P/L de ‚Ç¨{tradePL:F2}");
                analysis.AppendLine("‚Ä¢ Verifique se houve Break of Structure (BOS) antes da entrada");
                analysis.AppendLine("‚Ä¢ Poss√≠vel entrada fora da OTE Zone (61.8%-78.6%)\n");
            }

            // An√°lise do tipo de entrada
            if (entryType < 30)
            {
                analysis.AppendLine("‚ö° **Entrada Impulsiva Detectada:**");
                analysis.AppendLine("‚Ä¢ Alto risco de entrar em FOMO");
                analysis.AppendLine("‚Ä¢ Recomendo aguardar retra√ß√£o para Order Block ou FVG");
                analysis.AppendLine("‚Ä¢ A OTE Zone oferece melhor R:R\n");
            }
            else if (entryType > 70)
            {
                analysis.AppendLine("‚öôÔ∏è **Entrada Operacional:**");
                analysis.AppendLine("‚Ä¢ Boa disciplina aguardando setup completo");
                analysis.AppendLine("‚Ä¢ Continue focando em conflu√™ncias (OB + FVG + OTE)");
                analysis.AppendLine("‚Ä¢ Considere time frames maiores para contexto\n");
            }

            // An√°lise de gan√¢ncia
            if (greed)
            {
                analysis.AppendLine("‚ö†Ô∏è **Padr√£o de Gan√¢ncia Identificado:**");
                analysis.AppendLine("‚Ä¢ Prov√°vel que tenha movido stop loss prematuramente");
                analysis.AppendLine("‚Ä¢ Recomendo usar parciais em n√≠veis fixos (1:1, 1:2, 1:3)");
                analysis.AppendLine("‚Ä¢ Proteja capital movendo SL para BE ap√≥s 1:1\n");
            }

            // Recomenda√ß√µes SMC espec√≠ficas
            analysis.AppendLine("üéØ **Recomenda√ß√µes SMC/OTE:**");

            if (tradeSide.ToLower() == "buy")
            {
                analysis.AppendLine("‚Ä¢ Para COMPRAS: Procure Bullish Order Blocks em suporte");
                analysis.AppendLine("‚Ä¢ Aguarde teste de FVG antes de entrar");
                analysis.AppendLine("‚Ä¢ Stop Loss abaixo do √∫ltimo swing low");
            }
            else
            {
                analysis.AppendLine("‚Ä¢ Para VENDAS: Identifique Bearish Order Blocks em resist√™ncia");
                analysis.AppendLine("‚Ä¢ Confirme mudan√ßa de estrutura (CHoCH) antes");
                analysis.AppendLine("‚Ä¢ Stop Loss acima do √∫ltimo swing high");
            }

            analysis.AppendLine("\nüìà **Pr√≥ximos Passos:**");
            analysis.AppendLine("1. Marque todos os Order Blocks no gr√°fico");
            analysis.AppendLine("2. Identifique a OTE Zone (61.8%-78.6% Fib)");
            analysis.AppendLine("3. Aguarde conflu√™ncia de pelo menos 3 fatores");
            analysis.AppendLine("4. Use no m√°ximo 1% de risco por trade");

            // An√°lise do coment√°rio do usu√°rio
            if (!string.IsNullOrWhiteSpace(commentText))
            {
                analysis.AppendLine($"\nüí≠ **Sobre seu coment√°rio:**");

                if (commentText.ToLower().Contains("volume"))
                {
                    analysis.AppendLine("‚Ä¢ Excelente observa√ß√£o sobre volume!");
                    analysis.AppendLine("‚Ä¢ Volume confirma movimentos institucionais (Smart Money)");
                }

                if (commentText.ToLower().Contains("resist√™ncia") || commentText.ToLower().Contains("suporte"))
                {
                    analysis.AppendLine("‚Ä¢ Boa identifica√ß√£o de S/R");
                    analysis.AppendLine("‚Ä¢ Confirme se s√£o Order Blocks ou apenas retail S/R");
                }

                if (commentText.ToLower().Contains("diverg√™ncia"))
                {
                    analysis.AppendLine("‚Ä¢ Diverg√™ncias s√£o √∫teis, mas confirme com estrutura");
                    analysis.AppendLine("‚Ä¢ SMC prioriza price action sobre indicadores");
                }
            }

            return analysis.ToString();
        }
    }
}